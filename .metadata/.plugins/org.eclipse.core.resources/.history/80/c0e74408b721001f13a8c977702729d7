package com.user.getway.config;

import java.util.HashMap;
import java.util.Map;

import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.client.RestTemplate;

@Configuration
@CrossOrigin(origins = "*")
//@EnableConfigurationProperties(GatewayConfig.class)
public class GatewayConfig {

	private AuthenticationFilter filter;

	public GatewayConfig(AuthenticationFilter filter) {
		super();
		this.filter = filter;
	}

	@Bean
	public RouteLocator routes(RouteLocatorBuilder builder) {

		Map<String, Object> corsConfigMap = new HashMap<>();
		// corsConfigMap.put("*", new CorsConfiguration().applyPermitDefaultValues());

		return builder.routes()
				.route("identity-provider", r -> r.path("/identity-handler/**").metadata("cors", corsConfigMap)
						// .filters(f -> f.filter(filter))
						.uri("lb://identity-provider"))
				.route("hr-handler", r -> r.path("/hr-handler/**")
						.filters(f -> f.filter(new RoleSettingFilter("HR", new RestTemplate()))).uri("lb://hr-handler"))
				.route("admin-handler",
						r -> r.path("/admin-handler/**")
								.filters(f -> f.filter(new RoleSettingFilter("ADMIN", new RestTemplate())))
								// .filters(f -> f.filter(filter)) // ................
								.uri("lb://admin-handler"))
				.route("user-handlerr",
						r -> r.path("/user/**").filters(f -> f.filter(filter)).uri("lb://user-handlerr"))
				.build();
	}

//	@Bean
//	public CorsConfigurationSource corsConfigurationSourcee() {
//		CorsConfiguration corsConfig = new CorsConfiguration();
//		corsConfig.setAllowedOrigins(List.of("http://localhost:5173")); // Replace with your frontend origin
//		corsConfig.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
//		corsConfig.setAllowedHeaders(Arrays.asList("Content-Type", "Authorization", "X-Requested-With")); // Adjust as
//																											// needed
//		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
//		source.registerCorsConfiguration("/**", corsConfig);
//		return source;
//	}

//	@Bean
//	public CorsConfigurationSource corsConfigurationSourcee() {
//		CorsConfiguration corsConfig = new CorsConfiguration();
//		corsConfig.setAllowedOrigins(Arrays.asList("http://localhost:5173", "*"));
//		corsConfig.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
//		corsConfig.setAllowedHeaders(Arrays.asList("*")); // Adjust allowed headers as needed
//		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
//		source.registerCorsConfiguration("/**", corsConfig);
//		return source;
//	}

//	@Bean
//	CorsConfigurationSource corsConfigurationSource() {
//		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
//		source.registerCorsConfiguration("/**", new CorsConfiguration().applyPermitDefaultValues());
//		return source;
//	}

}
